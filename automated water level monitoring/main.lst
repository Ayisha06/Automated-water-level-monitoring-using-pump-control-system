CCS PCM C Compiler, Version 5.008, 5967               09-Nov-24 15:19

               Filename:   C:\Users\AYISHA A\OneDrive\Desktop\ESI LAB\ayisha\main.lst

               ROM used:   663 words (8%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           23 (6%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1DE
0003:  NOP
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 0C,00
000D:  DATA D7,30
000E:  DATA F4,32
000F:  DATA 72,10
0010:  DATA CC,32
0011:  DATA F6,32
0012:  DATA 6C,10
0013:  DATA 43,3A
0014:  DATA 72,36
0015:  DATA 00,01
0016:  DATA 0C,00
0017:  DATA D7,30
0018:  DATA F4,32
0019:  DATA 72,1D
001A:  DATA 20,24
001B:  DATA E9,33
001C:  DATA 68,10
001D:  DATA 20,10
001E:  DATA 20,10
001F:  DATA 20,00
0020:  DATA D0,3A
0021:  DATA 6D,38
0022:  DATA 3A,10
0023:  DATA 4F,23
0024:  DATA 46,10
0025:  DATA 20,10
0026:  DATA 20,10
0027:  DATA 20,10
0028:  DATA 20,00
0029:  DATA D7,30
002A:  DATA F4,32
002B:  DATA 72,1D
002C:  DATA A0,26
002D:  DATA 65,32
002E:  DATA E9,3A
002F:  DATA 6D,10
0030:  DATA 20,10
0031:  DATA 00,01
0032:  DATA D0,3A
0033:  DATA 6D,38
0034:  DATA 3A,10
0035:  DATA 4F,27
0036:  DATA 20,10
0037:  DATA 20,10
0038:  DATA 20,10
0039:  DATA 20,10
003A:  DATA 00,01
003B:  DATA D7,30
003C:  DATA F4,32
003D:  DATA 72,1D
003E:  DATA 20,26
003F:  DATA EF,3B
0040:  DATA 20,10
0041:  DATA 20,10
0042:  DATA 20,00
0043:  DATA D0,3A
0044:  DATA 6D,38
0045:  DATA 3A,10
0046:  DATA 4F,27
0047:  DATA 20,10
0048:  DATA 20,10
0049:  DATA 20,10
004A:  DATA 20,00
*
0193:  MOVF   0B,W
0194:  MOVWF  23
0195:  BCF    0B.7
0196:  BSF    03.5
0197:  BSF    03.6
0198:  BSF    0C.7
0199:  BSF    0C.0
019A:  NOP
019B:  NOP
019C:  BCF    03.5
019D:  MOVF   0C,W
019E:  ANDLW  7F
019F:  BTFSC  03.2
01A0:  GOTO   1DA
01A1:  BCF    03.6
01A2:  MOVWF  24
01A3:  BSF    03.6
01A4:  MOVF   0D,W
01A5:  BCF    03.6
01A6:  MOVWF  25
01A7:  BSF    03.6
01A8:  MOVF   0F,W
01A9:  BCF    03.6
01AA:  MOVWF  26
01AB:  MOVF   24,W
01AC:  MOVWF  27
01AD:  CALL   167
01AE:  MOVF   25,W
01AF:  BSF    03.6
01B0:  MOVWF  0D
01B1:  BCF    03.6
01B2:  MOVF   26,W
01B3:  BSF    03.6
01B4:  MOVWF  0F
01B5:  BSF    03.5
01B6:  BSF    0C.7
01B7:  BSF    0C.0
01B8:  NOP
01B9:  NOP
01BA:  BCF    03.5
01BB:  RLF    0C,W
01BC:  RLF    0E,W
01BD:  ANDLW  7F
01BE:  BTFSC  03.2
01BF:  GOTO   1DA
01C0:  BCF    03.6
01C1:  MOVWF  24
01C2:  BSF    03.6
01C3:  MOVF   0D,W
01C4:  BCF    03.6
01C5:  MOVWF  25
01C6:  BSF    03.6
01C7:  MOVF   0F,W
01C8:  BCF    03.6
01C9:  MOVWF  26
01CA:  MOVF   24,W
01CB:  MOVWF  27
01CC:  CALL   167
01CD:  MOVF   25,W
01CE:  BSF    03.6
01CF:  MOVWF  0D
01D0:  BCF    03.6
01D1:  MOVF   26,W
01D2:  BSF    03.6
01D3:  MOVWF  0F
01D4:  INCF   0D,F
01D5:  BTFSC  03.2
01D6:  INCF   0F,F
01D7:  BCF    03.6
01D8:  GOTO   196
01D9:  BSF    03.6
01DA:  BCF    03.6
01DB:  BTFSC  23.7
01DC:  BSF    0B.7
01DD:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                      // No Watch Dog Timer 
.................... #FUSES NOBROWNOUT                 // No brownout reset 
.................... #FUSES NOLVP                      // No low voltage programming 
.................... #use delay(crystal=4MHz) 
*
004B:  MOVLW  28
004C:  MOVWF  04
004D:  BCF    03.7
004E:  MOVF   00,W
004F:  BTFSC  03.2
0050:  GOTO   05F
0051:  MOVLW  01
0052:  MOVWF  78
0053:  CLRF   77
0054:  DECFSZ 77,F
0055:  GOTO   054
0056:  DECFSZ 78,F
0057:  GOTO   053
0058:  MOVLW  4A
0059:  MOVWF  77
005A:  DECFSZ 77,F
005B:  GOTO   05A
005C:  GOTO   05D
005D:  DECFSZ 00,F
005E:  GOTO   051
005F:  RETURN
....................  
.................... // Define LCD Pin Assignments 
.................... #define LCD_ENABLE_PIN PIN_D0 
.................... #define LCD_RS_PIN PIN_D1 
.................... #define LCD_RW_PIN PIN_D2 
.................... #define LCD_DATA4 PIN_D4 
.................... #define LCD_DATA5 PIN_D5 
.................... #define LCD_DATA6 PIN_D6 
.................... #define LCD_DATA7 PIN_D7 
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
*
021C:  BCF    03.5
021D:  CLRF   21
021E:  BTFSC  05.0
021F:  INCF   21,F
0220:  BSF    03.5
0221:  BSF    05.1
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
0222:  BCF    03.5
0223:  CLRF   22
0224:  BTFSC  05.1
0225:  INCF   22,F
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00C4:  BSF    08.4
....................    output_float(LCD_DATA5); 
00C5:  BSF    08.5
....................    output_float(LCD_DATA6); 
00C6:  BSF    08.6
....................    output_float(LCD_DATA7); 
00C7:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00C8:  BCF    03.5
00C9:  BSF    08.2
00CA:  BSF    03.5
00CB:  BCF    08.2
....................    delay_cycles(1); 
00CC:  NOP
....................    lcd_output_enable(1); 
00CD:  BCF    03.5
00CE:  BSF    08.0
00CF:  BSF    03.5
00D0:  BCF    08.0
....................    delay_cycles(1); 
00D1:  NOP
....................    high = lcd_read_nibble(); 
00D2:  BCF    03.5
00D3:  CALL   08B
00D4:  MOVF   78,W
00D5:  MOVWF  2F
....................        
....................    lcd_output_enable(0); 
00D6:  BCF    08.0
00D7:  BSF    03.5
00D8:  BCF    08.0
....................    delay_cycles(1); 
00D9:  NOP
....................    lcd_output_enable(1); 
00DA:  BCF    03.5
00DB:  BSF    08.0
00DC:  BSF    03.5
00DD:  BCF    08.0
....................    delay_us(1); 
00DE:  NOP
....................    low = lcd_read_nibble(); 
00DF:  BCF    03.5
00E0:  CALL   08B
00E1:  MOVF   78,W
00E2:  MOVWF  2E
....................        
....................    lcd_output_enable(0); 
00E3:  BCF    08.0
00E4:  BSF    03.5
00E5:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00E6:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00E7:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00E8:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00E9:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00EA:  BCF    03.5
00EB:  SWAPF  2F,W
00EC:  MOVWF  77
00ED:  MOVLW  F0
00EE:  ANDWF  77,F
00EF:  MOVF   77,W
00F0:  IORWF  2E,W
00F1:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
008B:  CLRF   30
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
008C:  BSF    03.5
008D:  BSF    08.4
008E:  MOVLW  00
008F:  BCF    03.5
0090:  BTFSC  08.4
0091:  MOVLW  01
0092:  IORWF  30,F
....................    n |= input(LCD_DATA5) << 1; 
0093:  BSF    03.5
0094:  BSF    08.5
0095:  MOVLW  00
0096:  BCF    03.5
0097:  BTFSC  08.5
0098:  MOVLW  01
0099:  MOVWF  77
009A:  BCF    03.0
009B:  RLF    77,F
009C:  MOVF   77,W
009D:  IORWF  30,F
....................    n |= input(LCD_DATA6) << 2; 
009E:  BSF    03.5
009F:  BSF    08.6
00A0:  MOVLW  00
00A1:  BCF    03.5
00A2:  BTFSC  08.6
00A3:  MOVLW  01
00A4:  MOVWF  77
00A5:  RLF    77,F
00A6:  RLF    77,F
00A7:  MOVLW  FC
00A8:  ANDWF  77,F
00A9:  MOVF   77,W
00AA:  IORWF  30,F
....................    n |= input(LCD_DATA7) << 3; 
00AB:  BSF    03.5
00AC:  BSF    08.7
00AD:  MOVLW  00
00AE:  BCF    03.5
00AF:  BTFSC  08.7
00B0:  MOVLW  01
00B1:  MOVWF  77
00B2:  RLF    77,F
00B3:  RLF    77,F
00B4:  RLF    77,F
00B5:  MOVLW  F8
00B6:  ANDWF  77,F
00B7:  MOVF   77,W
00B8:  IORWF  30,F
....................     
....................    return(n); 
00B9:  MOVF   30,W
00BA:  MOVWF  78
....................   #else 
00BB:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0060:  BTFSC  2F.0
0061:  GOTO   064
0062:  BCF    08.4
0063:  GOTO   065
0064:  BSF    08.4
0065:  BSF    03.5
0066:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0067:  BCF    03.5
0068:  BTFSC  2F.1
0069:  GOTO   06C
006A:  BCF    08.5
006B:  GOTO   06D
006C:  BSF    08.5
006D:  BSF    03.5
006E:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
006F:  BCF    03.5
0070:  BTFSC  2F.2
0071:  GOTO   074
0072:  BCF    08.6
0073:  GOTO   075
0074:  BSF    08.6
0075:  BSF    03.5
0076:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0077:  BCF    03.5
0078:  BTFSC  2F.3
0079:  GOTO   07C
007A:  BCF    08.7
007B:  GOTO   07D
007C:  BSF    08.7
007D:  BSF    03.5
007E:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
007F:  NOP
....................    lcd_output_enable(1); 
0080:  BCF    03.5
0081:  BSF    08.0
0082:  BSF    03.5
0083:  BCF    08.0
....................    delay_us(2); 
0084:  GOTO   085
....................    lcd_output_enable(0); 
0085:  BCF    03.5
0086:  BCF    08.0
0087:  BSF    03.5
0088:  BCF    08.0
0089:  BCF    03.5
008A:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00BC:  BSF    03.5
00BD:  BCF    08.0
....................    lcd_rs_tris(); 
00BE:  BCF    08.1
....................    lcd_rw_tris(); 
00BF:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00C0:  BCF    03.5
00C1:  BCF    08.1
00C2:  BSF    03.5
00C3:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00F2:  MOVF   78,W
00F3:  MOVWF  2E
00F4:  BTFSS  2E.7
00F5:  GOTO   0F8
00F6:  BSF    03.5
00F7:  GOTO   0C4
....................    lcd_output_rs(address); 
00F8:  MOVF   2C,F
00F9:  BTFSS  03.2
00FA:  GOTO   0FD
00FB:  BCF    08.1
00FC:  GOTO   0FE
00FD:  BSF    08.1
00FE:  BSF    03.5
00FF:  BCF    08.1
....................    delay_cycles(1); 
0100:  NOP
....................    lcd_output_rw(0); 
0101:  BCF    03.5
0102:  BCF    08.2
0103:  BSF    03.5
0104:  BCF    08.2
....................    delay_cycles(1); 
0105:  NOP
....................    lcd_output_enable(0); 
0106:  BCF    03.5
0107:  BCF    08.0
0108:  BSF    03.5
0109:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
010A:  BCF    03.5
010B:  SWAPF  2D,W
010C:  MOVWF  2E
010D:  MOVLW  0F
010E:  ANDWF  2E,F
010F:  MOVF   2E,W
0110:  MOVWF  2F
0111:  CALL   060
....................    lcd_send_nibble(n & 0xf); 
0112:  MOVF   2D,W
0113:  ANDLW  0F
0114:  MOVWF  2E
0115:  MOVWF  2F
0116:  CALL   060
0117:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0118:  BSF    03.5
0119:  BCF    08.4
....................    output_drive(LCD_DATA5); 
011A:  BCF    08.5
....................    output_drive(LCD_DATA6); 
011B:  BCF    08.6
....................    output_drive(LCD_DATA7); 
011C:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
011D:  BCF    08.0
....................    lcd_rs_tris(); 
011E:  BCF    08.1
....................    lcd_rw_tris(); 
011F:  BCF    08.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0120:  BCF    03.5
0121:  BCF    08.1
0122:  BSF    03.5
0123:  BCF    08.1
....................    lcd_output_rw(0); 
0124:  BCF    03.5
0125:  BCF    08.2
0126:  BSF    03.5
0127:  BCF    08.2
....................    lcd_output_enable(0); 
0128:  BCF    03.5
0129:  BCF    08.0
012A:  BSF    03.5
012B:  BCF    08.0
....................      
....................    delay_ms(15); 
012C:  MOVLW  0F
012D:  BCF    03.5
012E:  MOVWF  28
012F:  CALL   04B
....................    for(i=1;i<=3;++i) 
0130:  MOVLW  01
0131:  MOVWF  23
0132:  MOVF   23,W
0133:  SUBLW  03
0134:  BTFSS  03.0
0135:  GOTO   13E
....................    { 
....................        lcd_send_nibble(3); 
0136:  MOVLW  03
0137:  MOVWF  2F
0138:  CALL   060
....................        delay_ms(5); 
0139:  MOVLW  05
013A:  MOVWF  28
013B:  CALL   04B
013C:  INCF   23,F
013D:  GOTO   132
....................    } 
....................     
....................    lcd_send_nibble(2); 
013E:  MOVLW  02
013F:  MOVWF  2F
0140:  CALL   060
....................    delay_ms(5); 
0141:  MOVLW  05
0142:  MOVWF  28
0143:  CALL   04B
....................    for(i=0;i<=3;++i) 
0144:  CLRF   23
0145:  MOVF   23,W
0146:  SUBLW  03
0147:  BTFSS  03.0
0148:  GOTO   152
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0149:  MOVF   23,W
014A:  CALL   004
014B:  MOVWF  24
014C:  CLRF   2C
014D:  MOVF   24,W
014E:  MOVWF  2D
014F:  CALL   0BC
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0150:  INCF   23,F
0151:  GOTO   145
0152:  BCF    0A.3
0153:  BCF    0A.4
0154:  GOTO   1ED (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0155:  DECFSZ 29,W
0156:  GOTO   158
0157:  GOTO   15B
....................       address=LCD_LINE_TWO; 
0158:  MOVLW  40
0159:  MOVWF  2A
015A:  GOTO   15C
....................    else 
....................       address=0; 
015B:  CLRF   2A
....................       
....................    address+=x-1; 
015C:  MOVLW  01
015D:  SUBWF  28,W
015E:  ADDWF  2A,F
....................    lcd_send_byte(0,0x80|address); 
015F:  MOVF   2A,W
0160:  IORLW  80
0161:  MOVWF  2B
0162:  CLRF   2C
0163:  MOVF   2B,W
0164:  MOVWF  2D
0165:  CALL   0BC
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0166:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0167:  MOVF   27,W
0168:  XORLW  07
0169:  BTFSC  03.2
016A:  GOTO   175
016B:  XORLW  0B
016C:  BTFSC  03.2
016D:  GOTO   17A
016E:  XORLW  06
016F:  BTFSC  03.2
0170:  GOTO   182
0171:  XORLW  02
0172:  BTFSC  03.2
0173:  GOTO   188
0174:  GOTO   18D
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0175:  MOVLW  01
0176:  MOVWF  28
0177:  MOVWF  29
0178:  CALL   155
0179:  GOTO   192
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
017A:  CLRF   2C
017B:  MOVLW  01
017C:  MOVWF  2D
017D:  CALL   0BC
....................                      delay_ms(2); 
017E:  MOVLW  02
017F:  MOVWF  28
0180:  CALL   04B
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0181:  GOTO   192
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0182:  MOVLW  01
0183:  MOVWF  28
0184:  MOVLW  02
0185:  MOVWF  29
0186:  CALL   155
0187:  GOTO   192
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0188:  CLRF   2C
0189:  MOVLW  10
018A:  MOVWF  2D
018B:  CALL   0BC
018C:  GOTO   192
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
018D:  MOVLW  01
018E:  MOVWF  2C
018F:  MOVF   27,W
0190:  MOVWF  2D
0191:  CALL   0BC
....................      #endif 
....................    } 
0192:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... // Water Level Sensor Pin Definitions 
.................... #define LOW_SENSOR   PIN_A0       // Low water level sensor 
.................... #define HIGH_SENSOR  PIN_A1       // High water level sensor 
.................... #define RELAY        PIN_C0       // Relay controlling the pump 
....................  
.................... void main() { 
*
01DE:  MOVF   03,W
01DF:  ANDLW  1F
01E0:  MOVWF  03
01E1:  MOVLW  FF
01E2:  MOVWF  20
01E3:  BSF    03.5
01E4:  BSF    1F.0
01E5:  BSF    1F.1
01E6:  BSF    1F.2
01E7:  BCF    1F.3
01E8:  MOVLW  07
01E9:  MOVWF  1C
01EA:  BCF    03.7
....................    // Initialize LCD with the defined pins 
....................    lcd_init(); 
01EB:  BCF    03.5
01EC:  GOTO   118
....................     
....................    // Display startup message on the LCD 
....................    lcd_putc("\f");              // Clear the screen 
01ED:  MOVLW  0C
01EE:  BSF    03.6
01EF:  MOVWF  0D
01F0:  MOVLW  00
01F1:  MOVWF  0F
01F2:  BCF    03.6
01F3:  CALL   193
....................    lcd_putc("Water Level Ctrl"); // Initial message 
01F4:  MOVLW  0D
01F5:  BSF    03.6
01F6:  MOVWF  0D
01F7:  MOVLW  00
01F8:  MOVWF  0F
01F9:  BCF    03.6
01FA:  CALL   193
....................    delay_ms(2000);              // Wait 2 seconds 
01FB:  MOVLW  08
01FC:  MOVWF  23
01FD:  MOVLW  FA
01FE:  MOVWF  28
01FF:  CALL   04B
0200:  DECFSZ 23,F
0201:  GOTO   1FD
....................     
....................    // Clear the LCD screen for the main loop display 
....................    lcd_putc("\f"); 
0202:  MOVLW  16
0203:  BSF    03.6
0204:  MOVWF  0D
0205:  MOVLW  00
0206:  MOVWF  0F
0207:  BCF    03.6
0208:  CALL   193
....................     
....................    // Configure input/output pins 
....................    set_tris_a(0xFF); // Set PORTA (RA0 and RA1) as input for sensors 
0209:  MOVLW  FF
020A:  BSF    03.5
020B:  MOVWF  05
....................    set_tris_c(0xFE); // Set RC0 as output (relay control) 
020C:  MOVLW  FE
020D:  MOVWF  07
020E:  BCF    03.5
020F:  MOVWF  20
....................    set_tris_d(0x00); // Set PORTD as output for LCD 
0210:  MOVLW  00
0211:  BSF    03.5
0212:  MOVWF  08
....................     
....................    output_low(PIN_C0);  // Initially turn OFF the pump (relay off) 
0213:  BCF    03.5
0214:  BCF    20.0
0215:  MOVF   20,W
0216:  BSF    03.5
0217:  MOVWF  07
0218:  BCF    03.5
0219:  BCF    07.0
....................  
....................    while(TRUE) { 
....................       // Read the status of the water level sensors 
....................       int low_level = input(LOW_SENSOR);   // Read low water level sensor 
....................       int high_level = input(HIGH_SENSOR); // Read high water level sensor 
021A:  BSF    03.5
021B:  BSF    05.0
....................        
....................       // Water level control logic 
....................       if (!low_level && !high_level) { 
*
0226:  MOVF   21,F
0227:  BTFSS  03.2
0228:  GOTO   24A
0229:  MOVF   22,F
022A:  BTFSS  03.2
022B:  GOTO   24A
....................          // If both sensors are dry, water is low, pump ON 
....................          lcd_gotoxy(1, 1); 
022C:  MOVLW  01
022D:  MOVWF  28
022E:  MOVWF  29
022F:  CALL   155
....................          lcd_putc("Water: High      "); 
0230:  MOVLW  17
0231:  BSF    03.6
0232:  MOVWF  0D
0233:  MOVLW  00
0234:  MOVWF  0F
0235:  BCF    03.6
0236:  CALL   193
....................          output_high(RELAY);  // Turn ON the pump 
0237:  BCF    20.0
0238:  MOVF   20,W
0239:  BSF    03.5
023A:  MOVWF  07
023B:  BCF    03.5
023C:  BSF    07.0
....................          lcd_gotoxy(1, 2); 
023D:  MOVLW  01
023E:  MOVWF  28
023F:  MOVLW  02
0240:  MOVWF  29
0241:  CALL   155
....................          lcd_putc("Pump: OFF        "); 
0242:  MOVLW  20
0243:  BSF    03.6
0244:  MOVWF  0D
0245:  MOVLW  00
0246:  MOVWF  0F
0247:  BCF    03.6
0248:  CALL   193
....................       }  
0249:  GOTO   28E
....................       else if (low_level && !high_level) { 
024A:  MOVF   21,F
024B:  BTFSC  03.2
024C:  GOTO   26E
024D:  MOVF   22,F
024E:  BTFSS  03.2
024F:  GOTO   26E
....................          // If low sensor is wet, but high sensor is dry, water is medium, pump ON 
....................          lcd_gotoxy(1, 1); 
0250:  MOVLW  01
0251:  MOVWF  28
0252:  MOVWF  29
0253:  CALL   155
....................          lcd_putc("Water: Medium   "); 
0254:  MOVLW  29
0255:  BSF    03.6
0256:  MOVWF  0D
0257:  MOVLW  00
0258:  MOVWF  0F
0259:  BCF    03.6
025A:  CALL   193
....................          output_low(RELAY);  // Keep the pump ON 
025B:  BCF    20.0
025C:  MOVF   20,W
025D:  BSF    03.5
025E:  MOVWF  07
025F:  BCF    03.5
0260:  BCF    07.0
....................          lcd_gotoxy(1, 2); 
0261:  MOVLW  01
0262:  MOVWF  28
0263:  MOVLW  02
0264:  MOVWF  29
0265:  CALL   155
....................          lcd_putc("Pump: ON        "); 
0266:  MOVLW  32
0267:  BSF    03.6
0268:  MOVWF  0D
0269:  MOVLW  00
026A:  MOVWF  0F
026B:  BCF    03.6
026C:  CALL   193
....................       }  
026D:  GOTO   28E
....................       else if (high_level) { 
026E:  MOVF   22,F
026F:  BTFSC  03.2
0270:  GOTO   28E
....................          // If the high sensor is wet, water is high, pump OFF 
....................          lcd_gotoxy(1, 1); 
0271:  MOVLW  01
0272:  MOVWF  28
0273:  MOVWF  29
0274:  CALL   155
....................          lcd_putc("Water: Low     "); 
0275:  MOVLW  3B
0276:  BSF    03.6
0277:  MOVWF  0D
0278:  MOVLW  00
0279:  MOVWF  0F
027A:  BCF    03.6
027B:  CALL   193
....................          output_low(RELAY);  // Turn OFF the pump 
027C:  BCF    20.0
027D:  MOVF   20,W
027E:  BSF    03.5
027F:  MOVWF  07
0280:  BCF    03.5
0281:  BCF    07.0
....................          lcd_gotoxy(1, 2); 
0282:  MOVLW  01
0283:  MOVWF  28
0284:  MOVLW  02
0285:  MOVWF  29
0286:  CALL   155
....................          lcd_putc("Pump: ON       "); 
0287:  MOVLW  43
0288:  BSF    03.6
0289:  MOVWF  0D
028A:  MOVLW  00
028B:  MOVWF  0F
028C:  BCF    03.6
028D:  CALL   193
....................       } 
....................        
....................       delay_ms(500);  // Add a delay for sensor stability 
028E:  MOVLW  02
028F:  MOVWF  23
0290:  MOVLW  FA
0291:  MOVWF  28
0292:  CALL   04B
0293:  DECFSZ 23,F
0294:  GOTO   290
0295:  GOTO   21A
....................    } 
.................... } 
....................  
0296:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
